html_nodes(".lister-item-year") %>%
html_text() %>%
str_extract("\\d{4}")
# Süre
durations <- webpage %>%
html_nodes(".runtime") %>%
html_text() %>%
str_replace(" min", "") %>%
as.numeric()
# IMDb puanı
ratings <- webpage %>%
html_nodes(".ratings-imdb-rating strong") %>%
html_text() %>%
as.numeric()
# Oy sayısı
votes <- webpage %>%
html_nodes(".sort-num_votes-visible span:nth-child(2)") %>%
html_text() %>%
str_replace_all(",", "") %>%
as.numeric()
# Film URL'leri
urls <- webpage %>%
html_nodes(".lister-item-header a") %>%
html_attr("href") %>%
paste0("https://www.imdb.com", .)
# Veri çerçevesi oluştur
data.frame(
Title = titles,
Year = as.numeric(years),
Duration = durations,
Rating = ratings,
Votes = votes,
URL = urls,
stringsAsFactors = FALSE
)
}
urls <- c(url_last, url_pre)
scrape_movies <- function(url) {
# URL'den HTML sayfasını oku
webpage <- read_html(url)
# Filmin başlıkları
titles <- webpage %>%
html_nodes(".lister-item-header a") %>%
html_text()
# Filmin yılı
years <- webpage %>%
html_nodes(".lister-item-year") %>%
html_text() %>%
str_extract("\\d{4}")
# Süre
durations <- webpage %>%
html_nodes(".runtime") %>%
html_text() %>%
str_replace(" min", "") %>%
as.numeric()
# IMDb puanı
ratings <- webpage %>%
html_nodes(".ratings-imdb-rating strong") %>%
html_text() %>%
as.numeric()
# Oy sayısı
votes <- webpage %>%
html_nodes(".sort-num_votes-visible span:nth-child(2)") %>%
html_text() %>%
str_replace_all(",", "") %>%
as.numeric()
# Film URL'leri
urls <- webpage %>%
html_nodes(".lister-item-header a") %>%
html_attr("href") %>%
paste0("https://www.imdb.com", .)
# Veri çerçevesi oluştur
data.frame(
Title = titles,
Year = as.numeric(years),
Duration = durations,
Rating = ratings,
Votes = votes,
URL = urls,
stringsAsFactors = FALSE
)
}
movies <- map_df(urls, scrape_movies)
install.packages("tidyverse")
install.packages("rvest")
install.packages("stringr")
install.packages("tidyverse")
library(tidyverse)
library(rvest)
library(stringr)
url_last <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_pre <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
after_10 <- read_html(url_last)
before_10 <- read_html(url_pre)
urls <- c(url_last, url_pre)
scrape_movies <- function(url) {
# URL'den HTML sayfasını oku
webpage <- read_html(url)
# Filmin başlıkları
titles <- webpage %>%
html_nodes(".lister-item-header a") %>%
html_text()
# Filmin yılı
years <- webpage %>%
html_nodes(".lister-item-year") %>%
html_text() %>%
str_extract("\\d{4}")
# Süre
durations <- webpage %>%
html_nodes(".runtime") %>%
html_text() %>%
str_replace(" min", "") %>%
as.numeric()
# IMDb puanı
ratings <- webpage %>%
html_nodes(".ratings-imdb-rating strong") %>%
html_text() %>%
as.numeric()
# Oy sayısı
votes <- webpage %>%
html_nodes(".sort-num_votes-visible span:nth-child(2)") %>%
html_text() %>%
str_replace_all(",", "") %>%
as.numeric()
# Film URL'leri
urls <- webpage %>%
html_nodes(".lister-item-header a") %>%
html_attr("href") %>%
paste0("https://www.imdb.com", .)
# Veri çerçevesi oluştur
data.frame(
Title = titles,
Year = as.numeric(years),
Duration = durations,
Rating = ratings,
Votes = votes,
URL = urls,
stringsAsFactors = FALSE
)
}
movies <- map_df(urls, scrape_movies)
urls <- c(url_last, url_pre)
scrape_movies <- function(url) {
# URL'den HTML sayfasını oku
webpage <- read_html(url)
# Filmin başlıkları
titles <- webpage %>%
html_nodes(".lister-item-header a") %>%
html_text()
# Filmin yılı
years <- webpage %>%
html_nodes(".lister-item-year") %>%
html_text() %>%
str_extract("\\d{4}")
# Süre
durations <- webpage %>%
html_nodes(".runtime") %>%
html_text() %>%
str_replace(" min", "") %>%
as.numeric()
# IMDb puanı
ratings <- webpage %>%
html_nodes(".ratings-imdb-rating strong") %>%
html_text() %>%
as.numeric()
# Oy sayısı
votes <- webpage %>%
html_nodes(".sort-num_votes-visible span:nth-child(2)") %>%
html_text() %>%
str_replace_all(",", "") %>%
as.numeric()
# Film URL'leri
urls <- webpage %>%
html_nodes(".lister-item-header a") %>%
html_attr("href") %>%
paste0("https://www.imdb.com", .)
# Veri çerçevesi oluştur
data.frame(
Title = titles,
Year = as.numeric(years),
Duration = durations,
Rating = ratings,
Votes = votes,
URL = urls,
stringsAsFactors = FALSE
)
}
print(length(titles))
urls <- c(url_last, url_pre)
scrape_movies <- function(url) {
# URL'den HTML sayfasını oku
webpage <- read_html(url)
# Filmin başlıkları
titles <- webpage %>%
html_nodes(".lister-item-header a") %>%
html_text()
# Filmin yılı
years <- webpage %>%
html_nodes(".lister-item-year") %>%
html_text() %>%
str_extract("\\d{4}")
# Süre
durations <- webpage %>%
html_nodes(".runtime") %>%
html_text() %>%
str_replace(" min", "") %>%
as.numeric()
# IMDb puanı
ratings <- webpage %>%
html_nodes(".ratings-imdb-rating strong") %>%
html_text() %>%
as.numeric()
# Oy sayısı
votes <- webpage %>%
html_nodes(".sort-num_votes-visible span:nth-child(2)") %>%
html_text() %>%
str_replace_all(",", "") %>%
as.numeric()
# Film URL'leri
urls <- webpage %>%
html_nodes(".lister-item-header a") %>%
html_attr("href") %>%
paste0("https://www.imdb.com", .)
# Veri çerçevesi oluştur
data.frame(
Title = titles,
Year = as.numeric(years),
Duration = durations,
Rating = ratings,
Votes = votes,
URL = urls,
stringsAsFactors = FALSE
)
}
print(length(Title))
scrape_movies <- function(url) {
# URL'den HTML sayfasını oku
webpage <- read_html(url)
# Filmin başlıkları
titles <- webpage %>%
html_nodes(".lister-item-header a") %>%
html_text()
# Filmin yılı
years <- webpage %>%
html_nodes(".lister-item-year") %>%
html_text() %>%
str_extract("\\d{4}")
# Süre
durations <- webpage %>%
html_nodes(".runtime") %>%
html_text() %>%
str_replace(" min", "") %>%
as.numeric()
# IMDb puanı
ratings <- webpage %>%
html_nodes(".ratings-imdb-rating strong") %>%
html_text() %>%
as.numeric()
# Oy sayısı
votes <- webpage %>%
html_nodes(".sort-num_votes-visible span:nth-child(2)") %>%
html_text() %>%
str_replace_all(",", "") %>%
as.numeric()
# Film URL'leri
urls <- webpage %>%
html_nodes(".lister-item-header a") %>%
html_attr("href") %>%
paste0("https://www.imdb.com", .)
# Veri çerçevesi oluştur
data.frame(
Title = titles,
Year = as.numeric(years),
Duration = durations,
Rating = ratings,
Votes = votes,
URL = urls,
stringsAsFactors = FALSE
)
}
install.packages("tidyverse")
install.packages("rvest")
install.packages("stringr")
library(tidyverse)
library(rvest)
library(stringr)
url_last <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_pre <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
after_10 <- read_html(url_last)
install.packages("rvest")
before_10 <- read_html(url_pre)
install.packages("stringr")
install.packages("tidyverse")
install.packages("tidyverse")
urls <- c(url_last, url_pre)
scrape_movies <- function(url) {
# URL'den HTML sayfasını oku
webpage <- read_html(url)
# Filmin başlıkları
titles <- webpage %>%
html_nodes(".lister-item-header a") %>%
html_text()
# Filmin yılı
years <- webpage %>%
html_nodes(".lister-item-year") %>%
html_text() %>%
str_extract("\\d{4}")
# Süre
durations <- webpage %>%
html_nodes(".runtime") %>%
html_text() %>%
str_replace(" min", "") %>%
as.numeric()
# IMDb puanı
ratings <- webpage %>%
html_nodes(".ratings-imdb-rating strong") %>%
html_text() %>%
as.numeric()
# Oy sayısı
votes <- webpage %>%
html_nodes(".sort-num_votes-visible span:nth-child(2)") %>%
html_text() %>%
str_replace_all(",", "") %>%
as.numeric()
# Film URL'leri
urls <- webpage %>%
html_nodes(".lister-item-header a") %>%
html_attr("href") %>%
paste0("https://www.imdb.com", .)
# Veri çerçevesi oluştur
data.frame(
Title = titles,
Year = as.numeric(years),
Duration = durations,
Rating = ratings,
Votes = votes,
URL = urls,
stringsAsFactors = FALSE
)
}
print(length(years))
print(length(durations))
urls <- c(url_last, url_pre)
librariy(tidyverse)
library(tidyverse)
library(rvest)
library(stringr)
library(tidyverse)
library(rvest)
library(stringr)
url1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
urls <- c(url1, url2)
read_html(urls[1])
# Başlıklar
titles <- page %>%
html_nodes(".ipc-title__text") %>%
html_text(trim = TRUE)
library(tidyverse)
library(rvest)
library(stringr)
url1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
urls <- c(url1, url2)
read_html(urls[1])
# Başlıklar
titles <- page %>%
html_nodes(".ipc-title__text") %>%
html_text(trim = TRUE)
# Oy Sayısı
votes <- page %>%
html_nodes(".ipc-rating-star--voteCount") %>%
html_text(trim = TRUE)
# Puanlar
ratings <- page %>%
html_nodes(".ipc-rating-star--rating") %>%
html_text(trim = TRUE)
movie_data <- data.frame(
Title = titles,
Year = years,
Duration = durations,
Votes = votes,
Rating = ratings,
stringsAsFactors = FALSE
)
yes <- c("5", "6", "5'10", "5 feet", "4'11")
no <- c(""
, ".", "Five", "six")
s <- c(yes, no)
str_view(s, "[56]", match = NA)
library(sitringr)
library(stringr)
yes <- c("5", "6", "5'10", "5 feet", "4'11")
no <- c(""
, ".", "Five", "six")
s <- c(yes, no)
str_view(s, "[56]", match = NA)
str_view(s, "5|6", match = NA)
library(tidyverse)
library(rvest)
library(stringr)
library(ggplot2)
library(knitr)
urls <- c(
"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,&num_votes=2500,&country_of_origin=TR",
"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2024-12-31&num_votes=2499,&country_of_origin=TR"
)
html_pages <- lapply(urls, read_html)
# Extract Data
extract_data <- function(page) {
titles <- page %>% html_nodes(".ipc-title__text") %>% html_text(trim = TRUE)
years <- page %>% html_nodes(".dli-title-metadata-item:nth-child(1)") %>% html_text(trim = TRUE)
durations <- page %>% html_nodes(".dli-title-metadata-item:nth-child(2)") %>% html_text(trim = TRUE)
ratings <- page %>% html_nodes(".ratingGroup--imdb-rating") %>% html_text(trim = TRUE)
votes <- page %>% html_nodes(".ipc-rating-star--voteCount") %>% html_text(trim = TRUE)
list(titles = titles, years = years, durations = durations, ratings = ratings, votes = votes)
}
extracted_data <- lapply(html_pages, extract_data)
# Combine Data
combined_data <- map_dfc(names(extracted_data[[1]]), function(name) {
unlist(lapply(extracted_data, `[[`, name))
})
# Combine Data
ombined_data <- map_dfc(names(extracted_data[[1]]), function(name) {
unlist(lapply(extracted_data, `[[`, name))
})
# Combine Data
combined_data <- map_dfc(names(extracted_data[[1]]), function(name) {
unlist(lapply(extracted_data, `[[`, name))
})
# Combine Data
colnames(extracted_data) <- c("Title", "Year", "Duration", "Rating", "Votes")
library(tidyverse)
library(rvest)
library(stringr)
library(reshape2)
library(tidyverse)
library(rvest)
library(stringr)
library(ggplot2)
library(knitr)
library(httr)
library(kableExtra)
library(tidyverse)
library(rvest)
library(stringr)
library(ggplot2)
library(knitr)
library(httr)
base_url <- "https://www.imdb.com/search/title/?title_type=feature&num_votes=2500,&country_of_origin=TR&count=250"
url_vector <- c(
sprintf("%s&release_date=2010-01-01,2023-12-31", base_url),
sprintf("%s&release_date=,2009-12-31", base_url)
)
movie_titles <- c()
movie_years <- c()
movie_durations <- c()
movie_ratings <- c()
movie_votes <- c()
for(url in url_vector){
HTML = read_html(url)
title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
duration_trash <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration_trash <- html_text(duration_trash)
duration <- c()
for (string in duration_trash){
start_index <- 5
string_length <- str_length(string)
if(grepl("m", string, fixed = TRUE)){
end_index <- regexpr("m", string)
result <- substr(string, start_index, end_index)
duration <- append(duration,result)
}
else{
end_index <- regexpr("h", string)
result <- substr(string, start_index, end_index)
duration <- append(duration, result)
}
}
hour_duration <- str_split(duration, " ")
hour_duration <- sapply(hour_duration, function(x) ifelse(grepl("h", x[1], fixed = TRUE), x[1], 0))
hour_duration <- sub("h", "", hour_duration)
hour_duration <- as.numeric(hour_duration)
hour_duration <- hour_duration * 60
minute_duration <- str_split(duration, " ")
minute_duration <- sapply(minute_duration, function(x) ifelse(length(x) >= 2, x[2], ifelse(grepl("m", x, fixed = TRUE), x[1], ifelse(grepl("m", x[1], fixed = TRUE), x[1],0))))
minute_duration <- sub("m", "", minute_duration)
minute_duration <- as.numeric(minute_duration)
rating <- HTML %>% html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating")
rating <- html_text(rating)
rating <- substr(rating, 1, 3)
rating <- as.numeric(rating)
vote <- HTML %>% html_nodes(".sc-53c98e73-0.kRnqtn")
vote <- html_text(vote)
vote <- sub("Votes", "" ,vote)
vote <- sub(",", "", vote)
vote <- as.numeric(vote)
movie_titles <- append(movie_titles,title_names)
movie_years <- append(movie_years, year)
movie_durations <- append(movie_durations, hour_duration + minute_duration)
movie_ratings <- append(movie_ratings, rating)
movie_votes <- append(movie_votes, vote)
}
movies_df <- data.frame(movie_titles, movie_years, movie_durations, movie_ratings, movie_votes)
